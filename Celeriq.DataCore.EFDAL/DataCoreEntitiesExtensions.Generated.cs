//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Objects;
using System.Collections.Generic;
using Celeriq.DataCore.EFDAL.Entity;
using System.Linq.Expressions;

namespace Celeriq.DataCore.EFDAL
{
	#region DataCoreEntitiesExtensions

	/// <summary>
	/// Extension methods for this library
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.2.0")]
	public static partial class DataCoreEntitiesExtensions
	{
		#region Include Extension Methods

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.DimensionData> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.DimensionData> item, Expression<Func<Celeriq.DataCore.EFDAL.DimensionDataInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.DimensionStore> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item, Expression<Func<Celeriq.DataCore.EFDAL.DimensionStoreInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDefinitionInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryLogInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		/// <summary>
		/// Specifies the related objects to include in the query results.
		/// </summary>
		/// <param name="item">Related object to return in query results</param>
		/// <param name="query">The LINQ expresssion that maps an include path</param>
		public static ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> Include(this ObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryStatInclude, nHydrate.EFCore.DataAccess.IContextInclude>> query)
		{
			var strings = new List<string>(query.Body.ToString().Split('.'));
			strings.RemoveAt(0);
			var compoundString = string.Empty;
			foreach (var s in strings)
			{
				if (!string.IsNullOrEmpty(compoundString)) compoundString += ".";
				compoundString += s;
				item = item.Include(compoundString);
			}
			return item;
		}

		#endregion

		#region GetFieldType Extension Method

		/// <summary>
		/// Get the system type of a field of one of the contained context objects
		/// </summary>
		public static System.Type GetFieldType(this Celeriq.DataCore.EFDAL.DataCoreEntities context, Enum field)
		{
			if (field is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.GetFieldType((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.DimensionData.GetFieldType((Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.DimensionStore.GetFieldType((Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.RepositoryData.GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.RepositoryLog.GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.RepositoryStat.GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.ServerStat.GetFieldType((Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)field);
			if (field is Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants)
				return Celeriq.DataCore.EFDAL.Entity.UserAccount.GetFieldType((Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants)field);
			throw new Exception("Unknown field type!");
		}

		#endregion

		#region Metadata Extension Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <param name="entity">The source class</param>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Celeriq.DataCore.EFDAL.Interfaces.IMetadata GetMetaData(this nHydrate.EFCore.DataAccess.INHEntityObject entity)
		{
			var a = entity.GetType().GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Celeriq.DataCore.EFDAL.Interfaces.IMetadata;
		}

		#endregion

		#region GetEntityType

		/// <summary>
		/// Determines the entity from one of its fields
		/// </summary>
		public static System.Type GetEntityType(EntityMappingConstants entityType)
		{
			switch (entityType)
			{
				case EntityMappingConstants.ConfigurationSetting: return typeof(Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting);
				case EntityMappingConstants.DimensionData: return typeof(Celeriq.DataCore.EFDAL.Entity.DimensionData);
				case EntityMappingConstants.DimensionStore: return typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore);
				case EntityMappingConstants.RepositoryActionType: return typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryActionType);
				case EntityMappingConstants.RepositoryData: return typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData);
				case EntityMappingConstants.RepositoryDefinition: return typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition);
				case EntityMappingConstants.RepositoryLog: return typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryLog);
				case EntityMappingConstants.RepositoryStat: return typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat);
				case EntityMappingConstants.ServerStat: return typeof(Celeriq.DataCore.EFDAL.Entity.ServerStat);
				case EntityMappingConstants.UserAccount: return typeof(Celeriq.DataCore.EFDAL.Entity.UserAccount);
			}
			throw new Exception("Unknown entity type!");
		}

		#endregion

		#region GetValue Methods

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryActionType item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryActionType item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryActionType item, Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryActionType item, Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, T>> selector)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="selector">The field to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, T>> selector, T defaultValue)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants), tn, true);
			return item.GetValue<T>(te, defaultValue);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants field)
		{
			return item.GetValue<T>(field, default(T));
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		/// <typeparam name="T">The type of value to retrieve</typeparam>
		/// <param name="item">The item from which to pull the value.</param>
		/// <param name="field">The field value to retrieve</param>
		/// <param name="defaultValue">The default value to return if the specified value is NULL</param>
		/// <returns></returns>
		public static T GetValue<T>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants field, T defaultValue)
		{
			var valid = false;
			if (typeof(T) == typeof(bool)) valid = true;
			else if (typeof(T) == typeof(byte)) valid = true;
			else if (typeof(T) == typeof(char)) valid = true;
			else if (typeof(T) == typeof(DateTime)) valid = true;
			else if (typeof(T) == typeof(decimal)) valid = true;
			else if (typeof(T) == typeof(double)) valid = true;
			else if (typeof(T) == typeof(int)) valid = true;
			else if (typeof(T) == typeof(long)) valid = true;
			else if (typeof(T) == typeof(Single)) valid = true;
			else if (typeof(T) == typeof(string)) valid = true;
			if (!valid)
				throw new Exception("Cannot convert object to type '" + typeof(T).ToString() + "'!");

			object o = item.GetValue(field, defaultValue);
			if (o == null) return defaultValue;

			if (o is T)
			{
				return (T)o;
			}
			else if (typeof(T) == typeof(bool))
			{
				return (T)(object)Convert.ToBoolean(o);
			}
			else if (typeof(T) == typeof(byte))
			{
				return (T)(object)Convert.ToByte(o);
			}
			else if (typeof(T) == typeof(char))
			{
				return (T)(object)Convert.ToChar(o);
			}
			else if (typeof(T) == typeof(DateTime))
			{
				return (T)(object)Convert.ToDateTime(o);
			}
			else if (typeof(T) == typeof(decimal))
			{
				return (T)(object)Convert.ToDecimal(o);
			}
			else if (typeof(T) == typeof(double))
			{
				return (T)(object)Convert.ToDouble(o);
			}
			else if (typeof(T) == typeof(int))
			{
				return (T)(object)Convert.ToInt32(o);
			}
			else if (typeof(T) == typeof(long))
			{
				return (T)(object)Convert.ToInt64(o);
			}
			else if (typeof(T) == typeof(Single))
			{
				return (T)(object)Convert.ToSingle(o);
			}
			else if (typeof(T) == typeof(string))
			{
				return (T)(object)Convert.ToString(o);
			}
			throw new Exception("Cannot convert object!");
		}

		#endregion

		#region SetValue
		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.DimensionData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.DimensionStore item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryData item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryLog item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.RepositoryStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.ServerStat item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TResult>> selector, TResult newValue)
		{
			SetValue(item, selector, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="item">The entity to set</param>
		/// <param name="selector">The field on the entity to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public static void SetValue<TResult>(this Celeriq.DataCore.EFDAL.Entity.UserAccount item, System.Linq.Expressions.Expression<System.Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TResult>> selector, TResult newValue, bool fixLength)
		{
			var b = selector.Body.ToString();
			var arr = b.Split('.');
			if (arr.Length != 2) throw new System.Exception("Invalid selector");
			var tn = arr.Last();
			var te = (Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants)Enum.Parse(typeof(Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants), tn, true);
			item.SetValue(te, newValue);
		}

		#endregion

		#region GetPagedResults
		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.ConfigurationSetting.FieldNameConstants.ID:
						if (ob.Ascending) q = q.OrderBy(x => x.ID);
						else q = q.OrderByDescending(x => x.ID);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.Name:
						if (ob.Ascending) q = q.OrderBy(x => x.Name);
						else q = q.OrderByDescending(x => x.Name);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.Value:
						if (ob.Ascending) q = q.OrderBy(x => x.Value);
						else q = q.OrderByDescending(x => x.Value);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.ConfigurationSetting.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionData> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionData, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.DimensionData.FieldNameConstants.Data:
						if (ob.Ascending) q = q.OrderBy(x => x.Data);
						else q = q.OrderByDescending(x => x.Data);
						break;
					case Entity.DimensionData.FieldNameConstants.DimensionDataId:
						if (ob.Ascending) q = q.OrderBy(x => x.DimensionDataId);
						else q = q.OrderByDescending(x => x.DimensionDataId);
						break;
					case Entity.DimensionData.FieldNameConstants.DimensionsionStoreId:
						if (ob.Ascending) q = q.OrderBy(x => x.DimensionsionStoreId);
						else q = q.OrderByDescending(x => x.DimensionsionStoreId);
						break;
					case Entity.DimensionData.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.DimensionData.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.DimensionData.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.DimensionData.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionStore> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionStore> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionStore> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionStore> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.DimensionStore> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.DimensionStore, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.DimensionStore.FieldNameConstants.DIdx:
						if (ob.Ascending) q = q.OrderBy(x => x.DIdx);
						else q = q.OrderByDescending(x => x.DIdx);
						break;
					case Entity.DimensionStore.FieldNameConstants.DimensionStoreId:
						if (ob.Ascending) q = q.OrderBy(x => x.DimensionStoreId);
						else q = q.OrderByDescending(x => x.DimensionStoreId);
						break;
					case Entity.DimensionStore.FieldNameConstants.Name:
						if (ob.Ascending) q = q.OrderBy(x => x.Name);
						else q = q.OrderByDescending(x => x.Name);
						break;
					case Entity.DimensionStore.FieldNameConstants.RepositoryId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryId);
						else q = q.OrderByDescending(x => x.RepositoryId);
						break;
					case Entity.DimensionStore.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.DimensionStore.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.DimensionStore.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.DimensionStore.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.RepositoryActionType.FieldNameConstants.Name:
						if (ob.Ascending) q = q.OrderBy(x => x.Name);
						else q = q.OrderByDescending(x => x.Name);
						break;
					case Entity.RepositoryActionType.FieldNameConstants.RepositoryActionTypeId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryActionTypeId);
						else q = q.OrderByDescending(x => x.RepositoryActionTypeId);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryData> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryData> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryData, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.RepositoryData.FieldNameConstants.Data:
						if (ob.Ascending) q = q.OrderBy(x => x.Data);
						else q = q.OrderByDescending(x => x.Data);
						break;
					case Entity.RepositoryData.FieldNameConstants.Keyword:
						if (ob.Ascending) q = q.OrderBy(x => x.Keyword);
						else q = q.OrderByDescending(x => x.Keyword);
						break;
					case Entity.RepositoryData.FieldNameConstants.RepositoryDataId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryDataId);
						else q = q.OrderByDescending(x => x.RepositoryDataId);
						break;
					case Entity.RepositoryData.FieldNameConstants.RepositoryId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryId);
						else q = q.OrderByDescending(x => x.RepositoryId);
						break;
					case Entity.RepositoryData.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.RepositoryData.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.RepositoryData.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.RepositoryData.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.RepositoryDefinition.FieldNameConstants.DefinitionData:
						if (ob.Ascending) q = q.OrderBy(x => x.DefinitionData);
						else q = q.OrderByDescending(x => x.DefinitionData);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.ItemCount:
						if (ob.Ascending) q = q.OrderBy(x => x.ItemCount);
						else q = q.OrderByDescending(x => x.ItemCount);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.MemorySize:
						if (ob.Ascending) q = q.OrderBy(x => x.MemorySize);
						else q = q.OrderByDescending(x => x.MemorySize);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.Name:
						if (ob.Ascending) q = q.OrderBy(x => x.Name);
						else q = q.OrderByDescending(x => x.Name);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.RepositoryId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryId);
						else q = q.OrderByDescending(x => x.RepositoryId);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.UniqueKey:
						if (ob.Ascending) q = q.OrderBy(x => x.UniqueKey);
						else q = q.OrderByDescending(x => x.UniqueKey);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.VersionHash:
						if (ob.Ascending) q = q.OrderBy(x => x.VersionHash);
						else q = q.OrderByDescending(x => x.VersionHash);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.RepositoryDefinition.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryLog, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.RepositoryLog.FieldNameConstants.Count:
						if (ob.Ascending) q = q.OrderBy(x => x.Count);
						else q = q.OrderByDescending(x => x.Count);
						break;
					case Entity.RepositoryLog.FieldNameConstants.ElapsedTime:
						if (ob.Ascending) q = q.OrderBy(x => x.ElapsedTime);
						else q = q.OrderByDescending(x => x.ElapsedTime);
						break;
					case Entity.RepositoryLog.FieldNameConstants.IPAddress:
						if (ob.Ascending) q = q.OrderBy(x => x.IPAddress);
						else q = q.OrderByDescending(x => x.IPAddress);
						break;
					case Entity.RepositoryLog.FieldNameConstants.Query:
						if (ob.Ascending) q = q.OrderBy(x => x.Query);
						else q = q.OrderByDescending(x => x.Query);
						break;
					case Entity.RepositoryLog.FieldNameConstants.QueryId:
						if (ob.Ascending) q = q.OrderBy(x => x.QueryId);
						else q = q.OrderByDescending(x => x.QueryId);
						break;
					case Entity.RepositoryLog.FieldNameConstants.RepositoryId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryId);
						else q = q.OrderByDescending(x => x.RepositoryId);
						break;
					case Entity.RepositoryLog.FieldNameConstants.RepositoryLogId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryLogId);
						else q = q.OrderByDescending(x => x.RepositoryLogId);
						break;
					case Entity.RepositoryLog.FieldNameConstants.UsedCache:
						if (ob.Ascending) q = q.OrderBy(x => x.UsedCache);
						else q = q.OrderByDescending(x => x.UsedCache);
						break;
					case Entity.RepositoryLog.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.RepositoryLog.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.RepositoryStat, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.RepositoryStat.FieldNameConstants.Count:
						if (ob.Ascending) q = q.OrderBy(x => x.Count);
						else q = q.OrderByDescending(x => x.Count);
						break;
					case Entity.RepositoryStat.FieldNameConstants.Elapsed:
						if (ob.Ascending) q = q.OrderBy(x => x.Elapsed);
						else q = q.OrderByDescending(x => x.Elapsed);
						break;
					case Entity.RepositoryStat.FieldNameConstants.ItemCount:
						if (ob.Ascending) q = q.OrderBy(x => x.ItemCount);
						else q = q.OrderByDescending(x => x.ItemCount);
						break;
					case Entity.RepositoryStat.FieldNameConstants.RepositoryActionTypeId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryActionTypeId);
						else q = q.OrderByDescending(x => x.RepositoryActionTypeId);
						break;
					case Entity.RepositoryStat.FieldNameConstants.RepositoryId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryId);
						else q = q.OrderByDescending(x => x.RepositoryId);
						break;
					case Entity.RepositoryStat.FieldNameConstants.RepositoryStatId:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryStatId);
						else q = q.OrderByDescending(x => x.RepositoryStatId);
						break;
					case Entity.RepositoryStat.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.RepositoryStat.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ServerStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ServerStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ServerStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ServerStat> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.ServerStat> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.ServerStat, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.ServerStat.FieldNameConstants.AddedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.AddedDate);
						else q = q.OrderByDescending(x => x.AddedDate);
						break;
					case Entity.ServerStat.FieldNameConstants.MemoryUsageAvailable:
						if (ob.Ascending) q = q.OrderBy(x => x.MemoryUsageAvailable);
						else q = q.OrderByDescending(x => x.MemoryUsageAvailable);
						break;
					case Entity.ServerStat.FieldNameConstants.MemoryUsageProcess:
						if (ob.Ascending) q = q.OrderBy(x => x.MemoryUsageProcess);
						else q = q.OrderByDescending(x => x.MemoryUsageProcess);
						break;
					case Entity.ServerStat.FieldNameConstants.MemoryUsageTotal:
						if (ob.Ascending) q = q.OrderBy(x => x.MemoryUsageTotal);
						else q = q.OrderByDescending(x => x.MemoryUsageTotal);
						break;
					case Entity.ServerStat.FieldNameConstants.ProcessorUsage:
						if (ob.Ascending) q = q.OrderBy(x => x.ProcessorUsage);
						else q = q.OrderByDescending(x => x.ProcessorUsage);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryCreateDelta:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryCreateDelta);
						else q = q.OrderByDescending(x => x.RepositoryCreateDelta);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryDeleteDelta:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryDeleteDelta);
						else q = q.OrderByDescending(x => x.RepositoryDeleteDelta);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryInMem:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryInMem);
						else q = q.OrderByDescending(x => x.RepositoryInMem);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryLoadDelta:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryLoadDelta);
						else q = q.OrderByDescending(x => x.RepositoryLoadDelta);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryTotal:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryTotal);
						else q = q.OrderByDescending(x => x.RepositoryTotal);
						break;
					case Entity.ServerStat.FieldNameConstants.RepositoryUnloadDelta:
						if (ob.Ascending) q = q.OrderBy(x => x.RepositoryUnloadDelta);
						else q = q.OrderByDescending(x => x.RepositoryUnloadDelta);
						break;
					case Entity.ServerStat.FieldNameConstants.ServerStatId:
						if (ob.Ascending) q = q.OrderBy(x => x.ServerStatId);
						else q = q.OrderByDescending(x => x.ServerStatId);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.UserAccount> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.UserAccount> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TKey>> orderBy,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(where, orderBy, true, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.UserAccount> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			return item.GetPagedResults(x => true, orderBy, orderAscending, paging);
		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderBy">The sort order of this data set</param>
		/// <param name="orderAscending">The direction of sort</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.UserAccount> GetPagedResults<TKey>(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, bool>> where,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, TKey>> orderBy,
			bool orderAscending,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			if (item == null) return null;
			if (where == null) return null;
			if (orderBy == null) return null;
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			if (orderAscending)
				q = q.OrderBy(orderBy);
			else
				q = q.OrderByDescending(orderBy);

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		/// <summary>
		/// Pulls a paged set of data based on the paging criteria
		/// </summary>
		/// <param name="item">The ObjectSet from which to pull data</param>
		/// <param name="where">The filter by which to pull data</param>
		/// <param name="orderByList">The sort order of this data set</param>
		/// <param name="paging">The paging object that controls how data is selected. It will contain additional paging information on output.</param>
		public static IEnumerable<Celeriq.DataCore.EFDAL.Entity.UserAccount> GetPagedResults(
			this System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> item,
			System.Linq.Expressions.Expression<Func<Celeriq.DataCore.EFDAL.Entity.UserAccount, bool>> where,
			IEnumerable<nHydrate.EFCore.DataAccess.OrderedWrapper<Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants>> orderByList,
			nHydrate.EFCore.DataAccess.Paging paging)
		{
			var index = paging.PageIndex;
			var rpp = paging.RecordsperPage;
			if (index < 1) index = 1;
			if (rpp < 1) rpp = 1;

			paging.RecordCount = item.Count(where);
			paging.PageCount = paging.RecordCount / rpp;
			if ((paging.RecordCount % rpp) != 0) paging.PageCount++;

			var q = item.Where(where);

			foreach (var ob in orderByList)
			{
				switch (ob.Field)
				{
					case Entity.UserAccount.FieldNameConstants.Password:
						if (ob.Ascending) q = q.OrderBy(x => x.Password);
						else q = q.OrderByDescending(x => x.Password);
						break;
					case Entity.UserAccount.FieldNameConstants.UniqueKey:
						if (ob.Ascending) q = q.OrderBy(x => x.UniqueKey);
						else q = q.OrderByDescending(x => x.UniqueKey);
						break;
					case Entity.UserAccount.FieldNameConstants.UserId:
						if (ob.Ascending) q = q.OrderBy(x => x.UserId);
						else q = q.OrderByDescending(x => x.UserId);
						break;
					case Entity.UserAccount.FieldNameConstants.UserName:
						if (ob.Ascending) q = q.OrderBy(x => x.UserName);
						else q = q.OrderByDescending(x => x.UserName);
						break;
					case Entity.UserAccount.FieldNameConstants.CreatedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedDate);
						else q = q.OrderByDescending(x => x.CreatedDate);
						break;
					case Entity.UserAccount.FieldNameConstants.CreatedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.CreatedBy);
						else q = q.OrderByDescending(x => x.CreatedBy);
						break;
					case Entity.UserAccount.FieldNameConstants.ModifiedDate:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedDate);
						else q = q.OrderByDescending(x => x.ModifiedDate);
						break;
					case Entity.UserAccount.FieldNameConstants.ModifiedBy:
						if (ob.Ascending) q = q.OrderBy(x => x.ModifiedBy);
						else q = q.OrderByDescending(x => x.ModifiedBy);
						break;
				}
			}

			return q.Skip((index - 1) * rpp)
							.Take(rpp)
							.ToList();

		}

		#endregion

		#region ObservableCollection
		/// <summary>
		/// Returns an observable collection that can bound to UI controls
		/// </summary>
		public static System.Collections.ObjectModel.ObservableCollection<T> AsObservable<T>(this System.Collections.Generic.IEnumerable<T> list)
			where T : nHydrate.EFCore.DataAccess.NHEntityObject
		{
			var retval = new System.Collections.ObjectModel.ObservableCollection<T>();
			foreach (var o in list)
				retval.Add(o);
			return retval;
		}
		#endregion

		#region Purge
		/// <summary>
		/// Marks all objects in the list for deletion
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="list">The list of objects to remove</param>
		/// <param name="context">The context in which the calling object exists
		/// </param>
		public static void Purge<T>(this System.Data.Objects.DataClasses.EntityCollection<T> list, Celeriq.DataCore.EFDAL.DataCoreEntities context)
			where T : nHydrate.EFCore.DataAccess.NHEntityObject
		{
			foreach(var item in list.ToList())
			{
				if (item is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting);
				else if (item is Celeriq.DataCore.EFDAL.Entity.DimensionData)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.DimensionData);
				else if (item is Celeriq.DataCore.EFDAL.Entity.DimensionStore)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.DimensionStore);
				else if (item is Celeriq.DataCore.EFDAL.Entity.RepositoryData)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.RepositoryData);
				else if (item is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition);
				else if (item is Celeriq.DataCore.EFDAL.Entity.RepositoryLog)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.RepositoryLog);
				else if (item is Celeriq.DataCore.EFDAL.Entity.RepositoryStat)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.RepositoryStat);
				else if (item is Celeriq.DataCore.EFDAL.Entity.ServerStat)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.ServerStat);
				else if (item is Celeriq.DataCore.EFDAL.Entity.UserAccount)
					context.DeleteItem(item as Celeriq.DataCore.EFDAL.Entity.UserAccount);
				else
					throw new Exception("Unknown type");
			}
		}
		#endregion

	}

	/// <summary>
	/// Generates Sequential Guid values that can be used for Sql Server UniqueIdentifiers to improve performance.
	/// </summary>
	internal class SequentialIdGenerator
	{
		private readonly object _lock;
		private Guid _lastGuid;
		// 3 - the least significant byte in Guid ByteArray [for SQL Server ORDER BY clause]
		// 10 - the most significant byte in Guid ByteArray [for SQL Server ORDERY BY clause]
		private static readonly int[] SqlOrderMap = new int[] { 3, 2, 1, 0, 5, 4, 7, 6, 9, 8, 15, 14, 13, 12, 11, 10 };

		/// <summary>
		/// Creates a new SequentialId class to generate sequential GUID values.
		/// </summary>
		public SequentialIdGenerator() : this(Guid.NewGuid()) { }

		/// <summary>
		/// Creates a new SequentialId class to generate sequential GUID values.
		/// </summary>
		/// <param name="seed">Starting seed value.</param>
		/// <remarks>You can save the last generated value <see cref="LastValue"/> and then 
		/// use this as the new seed value to pick up where you left off.</remarks>
		public SequentialIdGenerator(Guid seed)
		{
			_lock = new object();
			_lastGuid = seed;
		}

		/// <summary>
		/// Last generated guid value.  If no values have been generated, this will be the seed value.
		/// </summary>
		public Guid LastValue
		{
			get {
				lock (_lock)
				{
					return _lastGuid;
				}
			}
			set
			{
				lock (_lock)
				{
					_lastGuid = value;
				}
			}
		}

		/// <summary>
		/// Generate a new sequential id.
		/// </summary>
		/// <returns>New sequential id value.</returns>
		public Guid NewId()
		{
			Guid newId;
			lock (_lock)
			{
				var guidBytes = _lastGuid.ToByteArray();
				ReorderToSqlOrder(ref guidBytes);
				newId = new Guid(guidBytes);
				_lastGuid = newId;
			}

			return newId;
		}

		private static void ReorderToSqlOrder(ref byte[] bytes)
		{
			foreach (var bytesIndex in SqlOrderMap)
			{
				bytes[bytesIndex]++;
				if (bytes[bytesIndex] != 0)
				{
					break;
				}
			}
		}

		/// <summary>
		/// IComparer.Compare compatible method to order Guid values the same way as MS Sql Server.
		/// </summary>
		/// <param name="x">The first guid to compare</param>
		/// <param name="y">The second guid to compare</param>
		/// <returns><see cref="System.Collections.IComparer.Compare"/></returns>
		public static int SqlCompare(Guid x, Guid y)
		{
			var result = 0;
			var index = SqlOrderMap.Length - 1;
			var xBytes = x.ToByteArray();
			var yBytes = y.ToByteArray();

			while (result == 0 && index >= 0)
			{
				result = xBytes[SqlOrderMap[index]].CompareTo(yBytes[SqlOrderMap[index]]);
				index--;
			}
			return result;
		}
	}
	#endregion

}
