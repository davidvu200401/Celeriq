//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 0168
using System;
using System.Linq;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Celeriq.DataCore.EFDAL.Entity;
using System.Data.SqlClient;
using System.Data;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__DimensionData_DimensionStore", "DimensionStore", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore), "DimensionDataList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.DimensionData), true)]
[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__RepositoryStat_RepositoryActionType", "RepositoryActionType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryActionType), "RepositoryStatList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat), true)]
[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__RepositoryData_RepositoryDefinition", "RepositoryDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition), "RepositoryDataList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData), true)]
[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__DimensionStore_RepositoryDefinition", "RepositoryDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition), "DimensionStoreList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.DimensionStore), true)]
[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__RepositoryLog_RepositoryDefinition", "RepositoryDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition), "RepositoryLogList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryLog), true)]
[assembly: EdmRelationshipAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__RepositoryStat_RepositoryDefinition", "RepositoryDefinition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition), "RepositoryStatList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryStat), true)]

#endregion

namespace Celeriq.DataCore.EFDAL
{
	#region EntityMappingConstants Enumeration

	/// <summary>
	/// A map for all entity types in this library
	/// </summary>
	public enum EntityMappingConstants
	{
		/// <summary>
		/// A mapping for the the ConfigurationSetting entity
		/// </summary>
		ConfigurationSetting,
		/// <summary>
		/// A mapping for the the DimensionData entity
		/// </summary>
		DimensionData,
		/// <summary>
		/// A mapping for the the DimensionStore entity
		/// </summary>
		DimensionStore,
		/// <summary>
		/// A mapping for the the RepositoryActionType entity
		/// </summary>
		RepositoryActionType,
		/// <summary>
		/// A mapping for the the RepositoryData entity
		/// </summary>
		RepositoryData,
		/// <summary>
		/// A mapping for the the RepositoryDefinition entity
		/// </summary>
		RepositoryDefinition,
		/// <summary>
		/// A mapping for the the RepositoryLog entity
		/// </summary>
		RepositoryLog,
		/// <summary>
		/// A mapping for the the RepositoryStat entity
		/// </summary>
		RepositoryStat,
		/// <summary>
		/// A mapping for the the ServerStat entity
		/// </summary>
		ServerStat,
		/// <summary>
		/// A mapping for the the UserAccount entity
		/// </summary>
		UserAccount,
	}

	#endregion

		/// <summary/>
		public enum DatabasePlatformConstants
		{
			/// <summary/>
			SQLServer,
			/// <summary/>
			MySql,
		}

	#region Entity Context

	/// <summary>
	/// There context DataCoreEntities
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.2.0")]
	public partial class DataCoreEntities : System.Data.Objects.ObjectContext, Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities, nHydrate.EFCore.DataAccess.IContext
	{
		/// <summary>
		/// The audit modifier used to mark database edits
		/// </summary>
		protected ContextStartup _contextStartup = new ContextStartup(null);

		private static Dictionary<string, SequentialIdGenerator> _sequentialIdGeneratorCache = new Dictionary<string, SequentialIdGenerator>();
		private static object _seqCacheLock = new object();

		/// <summary>
		/// Initializes a new DataCoreEntities object using the connection string found in the 'DataCoreEntities' section of the application configuration file.
		/// </summary>
		public DataCoreEntities() :
			base(Util.ConvertNormalCS2EFFromConfig("name=DataCoreEntities"), "DataCoreEntities")
		{
			this.CurrentPlatform = Util.GetDefinedPlatform();
			try
			{
				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Connection.ConnectionString));
				var timeoutValue = "30";
				if (builder.ContainsKey("connect timeout"))
					timeoutValue = (string) builder["connect timeout"];
				else if (builder.ContainsKey("connection timeout"))
					timeoutValue = (string) builder["connection timeout"];
				var v = Convert.ToInt32(timeoutValue);
				if (v > 0)
					this.CommandTimeout = v;
			}
			catch { }
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DataCoreEntities object with an audit modifier.
		/// </summary>
		public DataCoreEntities(ContextStartup contextStartup) :
			base(Util.ConvertNormalCS2EFFromConfig("name=DataCoreEntities", contextStartup), "DataCoreEntities")
		{
			_contextStartup = contextStartup;
			this.CurrentPlatform = contextStartup.CurrentPlatform;
			this.ContextOptions.LazyLoadingEnabled = contextStartup.AllowLazyLoading;
			this.CommandTimeout = contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DataCoreEntities object with an audit modifier.
		/// </summary>
		public DataCoreEntities(ContextStartup contextStartup, string connectionString) :
			base(Util.ConvertNormalCS2EF(connectionString, contextStartup), "DataCoreEntities")
		{
			_contextStartup = contextStartup;
			this.CurrentPlatform = contextStartup.CurrentPlatform;
			this.ContextOptions.LazyLoadingEnabled = contextStartup.AllowLazyLoading;
			this.CommandTimeout = contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DataCoreEntities object.
		/// </summary>
		public DataCoreEntities(string connectionString) :
			base(Util.ConvertNormalCS2EF(connectionString), "DataCoreEntities")
		{
			this.CurrentPlatform = Util.GetDefinedPlatform();
			try
			{
				var builder = new System.Data.Odbc.OdbcConnectionStringBuilder(Util.StripEFCS2Normal(this.Connection.ConnectionString));
				var timeoutValue = "30";
				if (builder.ContainsKey("connect timeout"))
					timeoutValue = (string) builder["connect timeout"];
				else if (builder.ContainsKey("connection timeout"))
					timeoutValue = (string) builder["connection timeout"];
				var v = Convert.ToInt32(timeoutValue);
				if (v > 0)
					this.CommandTimeout = v;
			}
			catch { }
			this.OnContextCreated();
		}

		/// <summary>
		/// Initialize a new DataCoreEntities object.
		/// </summary>
		public DataCoreEntities(System.Data.EntityClient.EntityConnection connection) :
			base(connection, "DataCoreEntities")
		{
			this.CurrentPlatform = Util.GetDefinedPlatform();
			this.OnContextCreated();
		}

		partial void OnContextCreated();

		partial void OnContextCreated()
		{
			// set the Context reference whenever an entity is loaded
			this.ObjectMaterialized += (sender, e) =>
			{
				var o = ((e.Entity as nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject) as IEntityWithContext);
				if (o != null) o.Context = this;
			};
		}

		/// <summary />
		public static void ResetSequentialGuid(EntityMappingConstants entity, string key, Guid seed)
		{
			if (string.IsNullOrEmpty(key))
				throw new Exception("Invalid key");

			lock (_seqCacheLock)
			{
				var k = entity.ToString() + "|" + key;
				if (!_sequentialIdGeneratorCache.ContainsKey(k))
					_sequentialIdGeneratorCache.Add(k, new SequentialIdGenerator(seed));
				else
					_sequentialIdGeneratorCache[k].LastValue = seed;
			}

		}

		/// <summary />
		public static Guid GetNextSequentialGuid(EntityMappingConstants entity, string key)
		{
			if (string.IsNullOrEmpty(key))
				throw new Exception("Invalid key");

			lock (_seqCacheLock)
			{
				var k = entity.ToString() + "|" + key;
				if (!_sequentialIdGeneratorCache.ContainsKey(k))
					ResetSequentialGuid(entity, key, Guid.NewGuid());
				return _sequentialIdGeneratorCache[k].NewId();
			}
		}

		/// <summary>
		/// Determines the supported database platforms
		/// </summary>
		public DatabasePlatformConstants CurrentPlatform { get; private set; }

		/// <summary>
		/// 
		/// Entity for the 'ConfigurationSetting' database table
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> ConfigurationSetting
		{
			get
			{
				lock (_lockerconfigurationsetting)
				{
					if ((this._configurationsetting == null))
					{
						this._configurationsetting = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting>("ConfigurationSetting");
					}
					return this._configurationsetting;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the ConfigurationSetting entity
		/// </summary>
		private object _lockerconfigurationsetting = new object();

		/// <summary>
		/// The internal reference variable for the 'ConfigurationSetting' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting> _configurationsetting;

		/// <summary>
		/// 
		/// Entity for the 'DimensionData' database table
		/// <para> </para>
		/// <para>Inbound Relations</para>
		/// <para>DimensionStore -> DimensionData</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> DimensionData
		{
			get
			{
				lock (_lockerdimensiondata)
				{
					if ((this._dimensiondata == null))
					{
						this._dimensiondata = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData>("DimensionData");
					}
					return this._dimensiondata;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the DimensionData entity
		/// </summary>
		private object _lockerdimensiondata = new object();

		/// <summary>
		/// The internal reference variable for the 'DimensionData' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionData> _dimensiondata;

		/// <summary>
		/// 
		/// Entity for the 'DimensionStore' database table
		/// <para> </para>
		/// <para>Outbound Relations</para>
		/// <para>DimensionStore -> DimensionData</para>
		/// <para> </para>
		/// <para>Inbound Relations</para>
		/// <para>RepositoryDefinition -> DimensionStore</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> DimensionStore
		{
			get
			{
				lock (_lockerdimensionstore)
				{
					if ((this._dimensionstore == null))
					{
						this._dimensionstore = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore>("DimensionStore");
					}
					return this._dimensionstore;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the DimensionStore entity
		/// </summary>
		private object _lockerdimensionstore = new object();

		/// <summary>
		/// The internal reference variable for the 'DimensionStore' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.DimensionStore> _dimensionstore;

		/// <summary>
		/// 
		/// Entity for the 'RepositoryActionType' database table
		/// <para> </para>
		/// <para>Outbound Relations</para>
		/// <para>RepositoryActionType -> RepositoryStat</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> RepositoryActionType
		{
			get
			{
				lock (_lockerrepositoryactiontype)
				{
					if ((this._repositoryactiontype == null))
					{
						this._repositoryactiontype = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType>("RepositoryActionType");
					}
					return this._repositoryactiontype;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the RepositoryActionType entity
		/// </summary>
		private object _lockerrepositoryactiontype = new object();

		/// <summary>
		/// The internal reference variable for the 'RepositoryActionType' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryActionType> _repositoryactiontype;

		/// <summary>
		/// 
		/// Entity for the 'RepositoryData' database table
		/// <para> </para>
		/// <para>Inbound Relations</para>
		/// <para>RepositoryDefinition -> RepositoryData</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> RepositoryData
		{
			get
			{
				lock (_lockerrepositorydata)
				{
					if ((this._repositorydata == null))
					{
						this._repositorydata = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData>("RepositoryData");
					}
					return this._repositorydata;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the RepositoryData entity
		/// </summary>
		private object _lockerrepositorydata = new object();

		/// <summary>
		/// The internal reference variable for the 'RepositoryData' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryData> _repositorydata;

		/// <summary>
		/// 
		/// Entity for the 'RepositoryDefinition' database table
		/// <para> </para>
		/// <para>Outbound Relations</para>
		/// <para>RepositoryDefinition -> RepositoryData</para>
		/// <para>RepositoryDefinition -> DimensionStore</para>
		/// <para>RepositoryDefinition -> RepositoryLog</para>
		/// <para>RepositoryDefinition -> RepositoryStat</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> RepositoryDefinition
		{
			get
			{
				lock (_lockerrepositorydefinition)
				{
					if ((this._repositorydefinition == null))
					{
						this._repositorydefinition = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition>("RepositoryDefinition");
					}
					return this._repositorydefinition;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the RepositoryDefinition entity
		/// </summary>
		private object _lockerrepositorydefinition = new object();

		/// <summary>
		/// The internal reference variable for the 'RepositoryDefinition' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition> _repositorydefinition;

		/// <summary>
		/// 
		/// Entity for the 'RepositoryLog' database table
		/// <para> </para>
		/// <para>Inbound Relations</para>
		/// <para>RepositoryDefinition -> RepositoryLog</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> RepositoryLog
		{
			get
			{
				lock (_lockerrepositorylog)
				{
					if ((this._repositorylog == null))
					{
						this._repositorylog = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog>("RepositoryLog");
					}
					return this._repositorylog;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the RepositoryLog entity
		/// </summary>
		private object _lockerrepositorylog = new object();

		/// <summary>
		/// The internal reference variable for the 'RepositoryLog' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryLog> _repositorylog;

		/// <summary>
		/// 
		/// Entity for the 'RepositoryStat' database table
		/// <para> </para>
		/// <para>Inbound Relations</para>
		/// <para>RepositoryActionType -> RepositoryStat</para>
		/// <para>RepositoryDefinition -> RepositoryStat</para>
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> RepositoryStat
		{
			get
			{
				lock (_lockerrepositorystat)
				{
					if ((this._repositorystat == null))
					{
						this._repositorystat = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat>("RepositoryStat");
					}
					return this._repositorystat;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the RepositoryStat entity
		/// </summary>
		private object _lockerrepositorystat = new object();

		/// <summary>
		/// The internal reference variable for the 'RepositoryStat' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.RepositoryStat> _repositorystat;

		/// <summary>
		/// 
		/// Entity for the 'ServerStat' database table
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> ServerStat
		{
			get
			{
				lock (_lockerserverstat)
				{
					if ((this._serverstat == null))
					{
						this._serverstat = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat>("ServerStat");
					}
					return this._serverstat;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the ServerStat entity
		/// </summary>
		private object _lockerserverstat = new object();

		/// <summary>
		/// The internal reference variable for the 'ServerStat' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.ServerStat> _serverstat;

		/// <summary>
		/// 
		/// Entity for the 'UserAccount' database table
		/// </summary>
		public virtual System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> UserAccount
		{
			get
			{
				lock (_lockeruseraccount)
				{
					if ((this._useraccount == null))
					{
						this._useraccount = base.CreateObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount>("UserAccount");
					}
					return this._useraccount;
				}
			}
		}

		/// <summary>
		/// The threading locker object to use when accessing the UserAccount entity
		/// </summary>
		private object _lockeruseraccount = new object();

		/// <summary>
		/// The internal reference variable for the 'UserAccount' object set
		/// </summary>
		protected System.Data.Objects.ObjectSet<Celeriq.DataCore.EFDAL.Entity.UserAccount> _useraccount;

		#region AddItem Methods

		/// <summary>
		/// Adds an entity of type 'ConfigurationSetting' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IConfigurationSetting entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)
			{
				((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("ConfigurationSetting", entity);
		}

		/// <summary>
		/// Adds an entity of type 'DimensionData' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionData entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData)
			{
				((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("DimensionData", entity);
		}

		/// <summary>
		/// Adds an entity of type 'DimensionStore' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionStore entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore)
			{
				((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("DimensionStore", entity);
		}

		/// <summary>
		/// Adds an entity of type 'RepositoryData' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("RepositoryData", entity);
		}

		/// <summary>
		/// Adds an entity of type 'RepositoryDefinition' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryDefinition entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("RepositoryDefinition", entity);
		}

		/// <summary>
		/// Adds an entity of type 'RepositoryLog' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryLog entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryLog)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryLog)entity).CreatedBy = _contextStartup.Modifer;
			}
			base.AddObject("RepositoryLog", entity);
		}

		/// <summary>
		/// Adds an entity of type 'RepositoryStat' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryStat entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryStat)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryStat)entity).CreatedBy = _contextStartup.Modifer;
			}
			base.AddObject("RepositoryStat", entity);
		}

		/// <summary>
		/// Adds an entity of type 'ServerStat' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.ServerStat)
			{
			}
			base.AddObject("ServerStat", entity);
		}

		/// <summary>
		/// Adds an entity of type 'UserAccount' to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual void AddItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IUserAccount entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount)
			{
				((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.AddObject("UserAccount", entity);
		}

		/// <summary>
		/// Adds an object to the object context.
		/// </summary>
		[Obsolete("This method signature is no longer used. Use the AddItem method.", true)]
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		public new void AddObject(string entitySetName, object entity)
		{
			throw new Exception("This method signature is no longer used. Use the AddItem method.");
		}

		#endregion

		#region DeleteItem Methods

		/// <summary>
		/// Deletes an entity of type 'ConfigurationSetting'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting entity)
		{
			if (entity == null) return;
			this.ConfigurationSetting.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'ConfigurationSetting'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IConfigurationSetting entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)
			{
				((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'DimensionData'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.DimensionData entity)
		{
			if (entity == null) return;
			this.DimensionData.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'DimensionData'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionData entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData)
			{
				((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'DimensionStore'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.DimensionStore entity)
		{
			if (entity == null) return;
			this.DimensionStore.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'DimensionStore'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionStore entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore)
			{
				((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryData'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.RepositoryData entity)
		{
			if (entity == null) return;
			this.RepositoryData.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryData'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryDefinition'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition entity)
		{
			if (entity == null) return;
			this.RepositoryDefinition.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryDefinition'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryDefinition entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryLog'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.RepositoryLog entity)
		{
			if (entity == null) return;
			this.RepositoryLog.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryLog'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryLog entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryLog)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryLog)entity).CreatedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryStat'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.RepositoryStat entity)
		{
			if (entity == null) return;
			this.RepositoryStat.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'RepositoryStat'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryStat entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryStat)
			{
				((Celeriq.DataCore.EFDAL.Entity.RepositoryStat)entity).CreatedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'ServerStat'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.ServerStat entity)
		{
			if (entity == null) return;
			this.ServerStat.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'ServerStat'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.ServerStat)
			{
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'UserAccount'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void DeleteItem(Celeriq.DataCore.EFDAL.Entity.UserAccount entity)
		{
			if (entity == null) return;
			this.UserAccount.DeleteObject(entity);
		}

		/// <summary>
		/// Deletes an entity of type 'UserAccount'
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		void Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DeleteItem(Celeriq.DataCore.EFDAL.Interfaces.Entity.IUserAccount entity)
		{
			if (entity == null) return;
			if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount)
			{
				((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).CreatedBy = _contextStartup.Modifer;
				((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ModifiedBy = _contextStartup.Modifer;
			}
			base.DeleteObject(entity);
		}

		/// <summary>
		/// Marks an object for deletion.
		/// </summary>
		[Obsolete("This method signature is no longer used. Use the AddItem method.", true)]
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		public new void DeleteObject(object entity)
		{
			if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.DimensionData);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.DimensionStore);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.RepositoryData);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryLog)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.RepositoryLog);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryStat)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.RepositoryStat);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.ServerStat)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.ServerStat);
			else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount)
				this.DeleteItem(entity as Celeriq.DataCore.EFDAL.Entity.UserAccount);
		}

		#endregion

		/// <summary>
		/// Returns the connection string used for this context object
		/// </summary>
		public string ConnectionString
		{
			get
			{
				try
				{
					if (this.Connection != null && !string.IsNullOrEmpty(this.Connection.ConnectionString))
					{
						return Util.StripEFCS2Normal(this.Connection.ConnectionString);
					}
					else
					{
						return null;
					}

				}
				catch (Exception ex)
				{
					return null;
				}
			}
		}
		/// <summary>
		/// Returns the globally configured connection string for this context type
		/// </summary>
		public static string GetConnectionString()
		{
			try
			{
				var a = System.Configuration.ConfigurationManager.ConnectionStrings["DataCoreEntities"];
				if (a != null)
				{
					var s = a.ConnectionString;
					var regEx = new System.Text.RegularExpressions.Regex("provider connection string\\s*=\\s*\"([^\"]*)");
					var m = regEx.Match(s);
					var connString = s;
					if (m != null && m.Groups.Count > 1)
					{
						connString = m.Groups[1].Value;
					}
					return connString;
				}
				else
				{
					throw new Exception("The connection string was not found.");
				}
			}
			catch (Exception ex)
			{
				throw new Exception("The connection string was not found.");
			}
		}

		/// <summary>
		/// The global settings of this context
		/// </summary>
		public ContextStartup ContextStartup
		{
			get { return _contextStartup; }
		}

		#region IDataCore Members

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IConfigurationSetting> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.ConfigurationSetting
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IConfigurationSetting>)this.ConfigurationSetting; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionData> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DimensionData
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionData>)this.DimensionData; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionStore> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.DimensionStore
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IDimensionStore>)this.DimensionStore; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryActionType> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.RepositoryActionType
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryActionType>)this.RepositoryActionType; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.RepositoryData
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData>)this.RepositoryData; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryDefinition> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.RepositoryDefinition
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryDefinition>)this.RepositoryDefinition; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryLog> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.RepositoryLog
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryLog>)this.RepositoryLog; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryStat> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.RepositoryStat
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryStat>)this.RepositoryStat; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.ServerStat
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat>)this.ServerStat; }
		}

		System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IUserAccount> Celeriq.DataCore.EFDAL.Interfaces.IDataCoreEntities.UserAccount
		{
			get { return (System.Data.Objects.IObjectSet<Celeriq.DataCore.EFDAL.Interfaces.Entity.IUserAccount>)this.UserAccount; }
		}

		#endregion

		/// <summary>
		/// Determines the version of the model that created this library.
		/// </summary>
		public virtual string Version
		{
			get { return "3.0.0.0.23"; }
		}

		/// <summary>
		/// Determines the key of the model that created this library.
		/// </summary>
		public virtual string ModelKey
		{
			get { return "b3fc7837-d0f4-4f9a-a978-b02ac30b9594"; }
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		public virtual bool IsValidConnection()
		{
			return IsValidConnection(GetConnectionString(), true);
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		public virtual bool IsValidConnection(bool checkVersion)
		{
			return IsValidConnection(GetConnectionString(), checkVersion);
		}

		/// <summary>
		/// Determines if the API matches the database connection
		/// </summary>
		/// <param name="checkVersion">Determines if the check also includes the exact version of the model</param>
		/// <param name="connectionString">Determines the connection string to use when connecting to the database</param>
		/// <returns></returns>
		public virtual bool IsValidConnection(string connectionString, bool checkVersion = true)
		{
			if (string.IsNullOrEmpty(connectionString))
				return false;

			//Get current version
			var version = GetDBVersion(connectionString);

			//If there is any version then the ModelKey was found, if not found then the database does not contain this model
			if (string.IsNullOrEmpty(version))
				return false;

			if (checkVersion)
			{
				if (version != this.Version)
					return false;
			}

			return true;
		}

		/// <summary>
		/// Retrieves the latest database version for the current model
		/// </summary>
		public string GetDBVersion(string connectionString)
		{
			var conn = new System.Data.SqlClient.SqlConnection();
			try
			{
				conn.ConnectionString = connectionString;
				conn.Open();

				var da = new SqlDataAdapter("select * from sys.tables where name = '__nhydrateschema'", conn);
				var ds = new DataSet();
				da.Fill(ds);
				if (ds.Tables[0].Rows.Count > 0)
				{
					da = new SqlDataAdapter("SELECT * FROM __nhydrateschema where [ModelKey] = '" + this.ModelKey + "'", conn);
					ds = new DataSet();
					da.Fill(ds);
					var t = ds.Tables[0];
					if (t.Rows.Count > 0)
					{
						return (string) t.Rows[0]["dbVersion"];
					}
				}
				return string.Empty;
			}
			catch (Exception ex)
			{
				throw;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}
		}

		/// <summary>
		/// Persists all updates to the data source and resets change tracking in the object context.
		/// </summary>
		/// <param name="options"></param>
		/// <returns>The number of objects in an System.Data.EntityState.Added, System.Data.EntityState.Modified, or System.Data.EntityState.Deleted state when System.Data.Objects.ObjectContext.SaveChanges() was called.</returns>
		public override int SaveChanges(SaveOptions options)
		{
			//Process deleted list
			var deletedList = this.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState.Deleted);
			foreach (var item in deletedList)
			{
				var entity = item.Entity as nHydrate.EFCore.DataAccess.IAuditable;
				if (entity != null)
				{
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifer)
					{
						System.Data.SqlClient.SqlConnection connection = null;
						try
						{
							connection = new System.Data.SqlClient.SqlConnection(GetConnectionString());
							connection.Open();
							System.Data.SqlClient.SqlCommand command = null;
							if (command != null)
							{
								command.CommandType = System.Data.CommandType.Text;
								if (this.ContextStartup.Modifer == null)
									command.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mod", System.DBNull.Value));
								else
									command.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mod", this.ContextStartup.Modifer));
								command.ExecuteNonQuery();
							}
						}
						catch
						{
							throw;
						}
						finally
						{
							if (connection != null && connection.State == System.Data.ConnectionState.Open)
								connection.Close();
						}
					}
				}
			}

			var markedTime = System.DateTime.Now;
			//Process added list
			var addedList = this.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState.Added);
			foreach (var item in addedList)
			{
				var entity = item.Entity as nHydrate.EFCore.DataAccess.IAuditable;
				if (entity != null)
				{
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifer)
					{
						if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryLog) ((Celeriq.DataCore.EFDAL.Entity.RepositoryLog)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryStat) ((Celeriq.DataCore.EFDAL.Entity.RepositoryStat)entity).ResetCreatedBy(this.ContextStartup.Modifer);
						else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ResetCreatedBy(this.ContextStartup.Modifer);
					}
					if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryLog) ((Celeriq.DataCore.EFDAL.Entity.RepositoryLog)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryStat) ((Celeriq.DataCore.EFDAL.Entity.RepositoryStat)entity).CreatedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).CreatedDate = markedTime;
					if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ModifiedDate = markedTime;

					if (this.CurrentPlatform == DatabasePlatformConstants.MySql)
					{
						if (entity.IsTimestampAuditImplemented)
						{
							if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
						}
					}

				}
			}

			//Process modified list
			var modifiedList = this.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState.Modified);
			foreach (var item in modifiedList)
			{
				var entity = item.Entity as nHydrate.EFCore.DataAccess.IAuditable;
				if (entity != null)
				{
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifer)
					{
						if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ModifiedBy = this.ContextStartup.Modifer;
						else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ModifiedBy = this.ContextStartup.Modifer;
						else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ModifiedBy = this.ContextStartup.Modifer;
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ModifiedBy = this.ContextStartup.Modifer;
						else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ModifiedBy = this.ContextStartup.Modifer;
						else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ModifiedBy = this.ContextStartup.Modifer;
					}

					if (this.CurrentPlatform == DatabasePlatformConstants.MySql)
					{
						if (entity.IsTimestampAuditImplemented)
						{
							if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
							else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).Timestamp = new byte[] { (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256), (byte)_rnd.Next(0, 256) };
						}
					}

					if (entity is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting) ((Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionData) ((Celeriq.DataCore.EFDAL.Entity.DimensionData)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.DimensionStore) ((Celeriq.DataCore.EFDAL.Entity.DimensionStore)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryData) ((Celeriq.DataCore.EFDAL.Entity.RepositoryData)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition) ((Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)entity).ModifiedDate = markedTime;
					else if (entity is Celeriq.DataCore.EFDAL.Entity.UserAccount) ((Celeriq.DataCore.EFDAL.Entity.UserAccount)entity).ModifiedDate = markedTime;
				}
			}

			return base.SaveChanges(options);
		}
		private Random _rnd = new Random();

		#region GetEntityFromField

		Enum nHydrate.EFCore.DataAccess.IContext.GetEntityFromField(Enum field)
		{
			return GetEntityFromField(field);
		}

		object nHydrate.EFCore.DataAccess.IContext.GetMetaData(Enum entity)
		{
			return GetMetaData((EntityMappingConstants)entity);
		}

		System.Type nHydrate.EFCore.DataAccess.IContext.GetFieldType(Enum field)
		{
			return this.GetFieldType(field);
		}

		/// <summary>
		/// Determines the entity from one of its fields
		/// </summary>
		public static EntityMappingConstants GetEntityFromField(Enum field)
		{
			if (field is Celeriq.DataCore.EFDAL.Entity.ConfigurationSetting.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.ConfigurationSetting;
			if (field is Celeriq.DataCore.EFDAL.Entity.DimensionData.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.DimensionData;
			if (field is Celeriq.DataCore.EFDAL.Entity.DimensionStore.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.DimensionStore;
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryActionType.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryActionType;
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryData;
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryDefinition;
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryLog.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryLog;
			if (field is Celeriq.DataCore.EFDAL.Entity.RepositoryStat.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryStat;
			if (field is Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.ServerStat;
			if (field is Celeriq.DataCore.EFDAL.Entity.UserAccount.FieldNameConstants) return Celeriq.DataCore.EFDAL.EntityMappingConstants.UserAccount;
			throw new Exception("Unknown field type!");
		}

		/// <summary>
		/// Gets the meta data object for an entity
		/// </summary>
		public static Celeriq.DataCore.EFDAL.Interfaces.IMetadata GetMetaData(Celeriq.DataCore.EFDAL.EntityMappingConstants table)
		{
			switch (table)
			{
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.ConfigurationSetting: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.ConfigurationSettingMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.DimensionData: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.DimensionDataMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.DimensionStore: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.DimensionStoreMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryActionType: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryActionTypeMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryData: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryDataMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryDefinition: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryDefinitionMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryLog: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryLogMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.RepositoryStat: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryStatMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.ServerStat: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.ServerStatMetadata();
				case Celeriq.DataCore.EFDAL.EntityMappingConstants.UserAccount: return new Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.UserAccountMetadata();
			}
			throw new Exception("Entity not found!");
		}

		#endregion

	}

	#endregion

}

namespace Celeriq.DataCore.EFDAL.Entity
{
}
#pragma warning restore 0168

