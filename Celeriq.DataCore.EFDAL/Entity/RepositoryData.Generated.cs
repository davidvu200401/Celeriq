//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data.Objects;
using System.Text;
using Celeriq.DataCore.EFDAL;
using nHydrate.EFCore.DataAccess;
using nHydrate.EFCore.EventArgs;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Linq;

namespace Celeriq.DataCore.EFDAL.Entity
{
	/// <summary>
	/// The collection to hold 'RepositoryData' entities
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.2.0")]
	[EdmEntityTypeAttribute(NamespaceName = "Celeriq.DataCore.EFDAL.Entity", Name = "RepositoryData")]
	[Serializable]
	[DataContractAttribute(IsReference = true)]
	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryDataMetadata))]
	[nHydrate.EFCore.Attributes.EntityMetadata("RepositoryData", false, true, true, true, "", true, false, false, "dbo")]
	public partial class RepositoryData : nHydrate.EFCore.DataAccess.NHEntityObject, nHydrate.EFCore.DataAccess.IBusinessObject, Celeriq.DataCore.EFDAL.IEntityWithContext, System.ComponentModel.IDataErrorInfo, Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData, System.ICloneable, System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData>, nHydrate.EFCore.DataAccess.IAuditable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'RepositoryData' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Data' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Data' property")]
			Data,
			/// <summary>
			/// Field mapping for the 'Keyword' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Keyword' property")]
			Keyword,
			/// <summary>
			/// Field mapping for the 'RepositoryDataId' property
			/// </summary>
			[nHydrate.EFCore.Attributes.PrimaryKeyAttribute()]
			[System.ComponentModel.ReadOnlyAttribute(true)]
			[System.ComponentModel.Description("Field mapping for the 'RepositoryDataId' property")]
			RepositoryDataId,
			/// <summary>
			/// Field mapping for the 'RepositoryId' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryId' property")]
			RepositoryId,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Method called when an instance of this class is created
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Initializes a new instance of the Celeriq.DataCore.EFDAL.Entity.RepositoryData class
		/// </summary>
		public RepositoryData()
		{
			this.OnCreated();
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'RepositoryData.Data' field.
		/// </summary>
		/// <remarks>Field: [RepositoryData].[Data], Field Length: max, Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Data")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual System.Byte[] Data
		{
			get { return _data; }
			set
			{
				if (value == _data) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<System.Byte[]>(value, "Data");
				//this.OnDataChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Data");
				_data = eventArg.Value;
				ReportPropertyChanged("Data");
				//this.OnDataChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryData.Keyword' field.
		/// </summary>
		/// <remarks>Field: [RepositoryData].[Keyword], Field Length: max, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Keyword")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Keyword
		{
			get { return _keyword; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Keyword))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "RepositoryData.Keyword", GetMaxLength(FieldNameConstants.Keyword)));
				if (value == _keyword) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Keyword");
				//this.OnKeywordChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Keyword");
				_keyword = eventArg.Value;
				ReportPropertyChanged("Keyword");
				//this.OnKeywordChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryData.RepositoryDataId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryData].[RepositoryDataId], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryDataId")]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long RepositoryDataId
		{
			get { return _repositoryDataId; }
			set
			{
				if (value == _repositoryDataId) return;
				ReportPropertyChanging("RepositoryDataId");
				_repositoryDataId = value;
				ReportPropertyChanged("RepositoryDataId");
			}
		}

		/// <summary>
		/// The property that maps back to the database 'RepositoryData.RepositoryId' field.
		/// </summary>
		/// <remarks>Field: [RepositoryData].[RepositoryId], Not Nullable, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryId")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int RepositoryId
		{
			get { return _repositoryId; }
			set
			{
				if (value == _repositoryId) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "RepositoryId");
				//this.OnRepositoryIdChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryId");
				_repositoryId = eventArg.Value;
				ReportPropertyChanged("RepositoryId");
				//this.OnRepositoryIdChanged(eventArg);
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "CreatedBy");
				//OnCreatedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedBy");
				_createdby = eventArg.Value;
				ReportPropertyChanged("CreatedBy");
				//OnCreatedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "CreatedDate");
				//OnCreatedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedDate");
				_createddate = eventArg.Value;
				ReportPropertyChanged("CreatedDate");
				//OnCreatedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "ModifiedBy");
				//OnModifiedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedBy");
				_modifiedby = eventArg.Value;
				ReportPropertyChanged("ModifiedBy");
				//OnModifiedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "ModifiedDate");
				//OnModifiedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedDate");
				_modifieddate = eventArg.Value;
				ReportPropertyChanged("ModifiedDate");
				//OnModifiedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual byte[] Timestamp
		{
			get { return _timestamp; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<byte[]>(value, "Timestamp");
				//OnTimestampChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Timestamp");
				_timestamp = eventArg.Value;
				ReportPropertyChanged("Timestamp");
				//OnTimestampChanged(eventArg);
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected System.Byte[] _data;
		/// <summary />
		protected string _keyword;
		/// <summary />
		protected long _repositoryDataId;
		/// <summary />
		protected int _repositoryId;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(FieldNameConstants field)
		{
			switch (field)
			{
				case FieldNameConstants.Data:
					return 0;
				case FieldNameConstants.Keyword:
					return int.MaxValue;
				case FieldNameConstants.RepositoryDataId:
					return 0;
				case FieldNameConstants.RepositoryId:
					return 0;
			}
			return 0;
		}

		int nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(FieldNameConstants field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants'.");

			switch ((FieldNameConstants)field)
			{
				case FieldNameConstants.Data: return typeof(System.Byte[]);
				case FieldNameConstants.Keyword: return typeof(string);
				case FieldNameConstants.RepositoryDataId: return typeof(long);
				case FieldNameConstants.RepositoryId: return typeof(int);
			}
			return null;
		}

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants'.");

			return GetFieldType((Celeriq.DataCore.EFDAL.Entity.RepositoryData.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			return this.GetValue((FieldNameConstants)field, defaultValue);
		}

		void nHydrate.EFCore.DataAccess.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			this.SetValue((FieldNameConstants)field, newValue);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Hold the primary key for this object
		/// </summary>
		protected nHydrate.EFCore.DataAccess.IPrimaryKey _primaryKey = null;
		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return null; }
		}

		#endregion

		#region IsParented

		/// <summary>
		/// Determines if this object is part of a collection or is detached
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		public virtual bool IsParented
		{
			get { return (this.EntityState != System.Data.EntityState.Detached); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Celeriq.DataCore.EFDAL.Entity.RepositoryData.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Celeriq.DataCore.EFDAL.Entity.RepositoryData.Clone(this);
			item._repositoryDataId = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static RepositoryData Clone(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData item)
		{
			var newItem = new RepositoryData();
			newItem.Data = item.Data;
			newItem.Keyword = item.Keyword;
			newItem.RepositoryDataId = item.RepositoryDataId;
			newItem.RepositoryId = item.RepositoryId;
			return newItem;
		}

		#endregion

		#region IsEquivalent

		/// <summary>
		/// Determines if all of the fields for the specified object exactly matches the current object.
		/// </summary>
		/// <param name="item">The object to compare</param>
		public override bool IsEquivalent(nHydrate.EFCore.DataAccess.INHEntityObject item)
		{
			return ((System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData>)this).Equals(item as Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData);
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field, object defaultValue)
		{
			if (field == FieldNameConstants.Data)
				return this.Data;
			if (field == FieldNameConstants.Keyword)
				return ((this.Keyword == null) ? defaultValue : this.Keyword);
			if (field == FieldNameConstants.RepositoryDataId)
				return this.RepositoryDataId;
			if (field == FieldNameConstants.RepositoryId)
				return this.RepositoryId;
			if (field == FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			if (field == FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == FieldNameConstants.ModifiedDate)
				return ((this.ModifiedDate == null) ? defaultValue : this.ModifiedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == FieldNameConstants.Data)
			{
				if (newValue == null)
				{
					throw new Exception("Field 'Data' does not allow null values!");
				}
				else
				{
					this.Data = (System.Byte[])newValue;
				}
			}
			else if (field == FieldNameConstants.Keyword)
			{
				this.Keyword = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.RepositoryDataId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == FieldNameConstants.RepositoryId)
			{
				this.RepositoryId = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryId' does not allow null values!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The navigation definition for walking [RepositoryData]->[RepositoryDefinition]
		/// Relationship Links: 
		/// [RepositoryDefinition.RepositoryId = RepositoryData.RepositoryId] (Required)
		/// </summary>
		[XmlIgnoreAttribute()]
		[SoapIgnoreAttribute()]
		[EdmRelationshipNavigationPropertyAttribute("Celeriq.DataCore.EFDAL.Entity", "FK__RepositoryData_RepositoryDefinition", "RepositoryDefinition")]
		public virtual RepositoryDefinition RepositoryDefinition
		{
			get
			{
				var retval = RepositoryDefinitionReference;
				if (!retval.IsLoaded && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)
				{
					retval.Load();
				}
				return retval.Value;
			}
			set { ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RepositoryDefinition>("Celeriq.DataCore.EFDAL.Entity.FK__RepositoryData_RepositoryDefinition", "RepositoryDefinition").Value = value; }
		}

		/// <summary>
		/// The navigation reference definition for walking RepositoryDefinition->RepositoryData
		/// </summary>
		[BrowsableAttribute(false)]
		protected virtual EntityReference<RepositoryDefinition> RepositoryDefinitionReference
		{
			get { return ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RepositoryDefinition>("Celeriq.DataCore.EFDAL.Entity.FK__RepositoryData_RepositoryDefinition", "RepositoryDefinition"); }
			set
			{
				if ((value != null))
					((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RepositoryDefinition>("Celeriq.DataCore.EFDAL.Entity.FK__RepositoryData_RepositoryDefinition", "RepositoryDefinition", value);
			}
		}

		#region IRepositoryData Interface

		Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryDefinition Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData.RepositoryDefinition
		{
			get { return this.RepositoryDefinition; }
			set { this.RepositoryDefinition = (Celeriq.DataCore.EFDAL.Entity.RepositoryDefinition)value; }
		}

		#endregion

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "data": return "data";
				case "keyword": return "keyword";
				case "repositorydataid": return "repositorydataid";
				case "repositoryid": return "repositoryid";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				case "modifieddate": return "modifieddate";
				case "modifiedby": return "modifiedby";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "data": return "RepositoryData";
				case "keyword": return "RepositoryData";
				case "repositorydataid": return "RepositoryData";
				case "repositoryid": return "RepositoryData";
				case "createdby": return "RepositoryData";
				case "createddate": return "RepositoryData";
				case "modifiedby": return "RepositoryData";
				case "modifieddate": return "RepositoryData";
				case "timestamp": return "RepositoryData";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "data": return "RepositoryData";
				case "keyword": return "RepositoryData";
				case "repositorydataid": return "RepositoryData";
				case "repositoryid": return "RepositoryData";
				case "createdby": return "RepositoryData";
				case "createddate": return "RepositoryData";
				case "modifiedby": return "RepositoryData";
				case "modifieddate": return "RepositoryData";
				case "timestamp": return "RepositoryData";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[data\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[data]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[keyword\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[keyword]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorydataid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[repositorydataid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[repositoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[createddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifiedby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[modifiedby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifieddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[modifieddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "RepositoryData") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), new ContextStartup(null), Celeriq.DataCore.EFDAL.DataCoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer)
		{
			return DeleteData(where, optimizer, new ContextStartup(null), Celeriq.DataCore.EFDAL.DataCoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, string connectionString)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), new ContextStartup(null), connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new nHydrate.EFCore.DataAccess.QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Celeriq.DataCore.EFDAL.DBHelper.GetConnection(Celeriq.DataCore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Celeriq.DataCore.EFDAL.RepositoryDataQuery>();
					using (var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<Celeriq.DataCore.EFDAL.RepositoryDataQuery>(dc, template, where))
					{
						if (startup.CommandTimeout != null && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout.Value;
						else cmd.CommandTimeout = 30;

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						string sql = "SELECT [t0].[RepositoryDataId] INTO #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (NOLOCK) " : string.Empty);
						sql += "DELETE [RepositoryData] FROM [dbo].[RepositoryData] " + noLock + "INNER JOIN #t ON [dbo].[RepositoryData].[RepositoryDataId] = #t.[RepositoryDataId]\r\n";
						sql += ";select @@rowcount";
						if (startup.IsAdmin) sql = LinqSQLParser.RemapTenantToAdminSql(sql);
						sql = "set ansi_nulls off;" + sql;
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						object p = cmd.ExecuteScalar();
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return (int)p;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, int? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, int?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Single? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Single?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, decimal? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, decimal?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, double? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, double?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, short? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, short?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, string newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, string newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, string newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, string>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, DateTime? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, DateTime?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, bool? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.RepositoryDataQuery, bool>> where, Guid? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.RepositoryData, Celeriq.DataCore.EFDAL.RepositoryDataQuery, Guid?>.UpdateData(select, where, newValue, "RepositoryData", GetDatabaseFieldName, true, null, connection, transaction);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(RepositoryData.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Data": return "Data";
				case "Keyword": return "Keyword";
				case "RepositoryDataId": return "RepositoryDataId";
				case "RepositoryId": return "RepositoryId";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

		#region Context

		DataCoreEntities IEntityWithContext.Context
		{
			get { return _internalContext; }
			set { _internalContext = value; }
		}
		private DataCoreEntities _internalContext = null;

		#endregion

		#region Auditing
		string nHydrate.EFCore.DataAccess.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsModifyAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string nHydrate.EFCore.DataAccess.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		byte[] nHydrate.EFCore.DataAccess.IAuditable.TimeStamp
		{
			get { return this.Timestamp; }
		}

		internal virtual void ResetModifiedBy(string modifier)
		{
			if (this.ModifiedBy != modifier)
				this.ModifiedBy = modifier;
		}

		internal virtual void ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			this.ResetModifiedBy(modifier);
		}
		#endregion

		#region Static Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryDataMetadata GetMetadata()
		{
			var a = typeof(RepositoryData).GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Celeriq.DataCore.EFDAL.Interfaces.IMetadata as Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.RepositoryDataMetadata;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'RepositoryData' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		bool System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData>.Equals(Celeriq.DataCore.EFDAL.Interfaces.Entity.IRepositoryData other)
		{
			return this.Equals(other);
		}

		/// <summary>
		/// Compares two objects of 'RepositoryData' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Celeriq.DataCore.EFDAL.Entity.RepositoryData;
			if (other == null) return false;
			return (
				other.Data == this.Data &&
				other.Keyword == this.Keyword &&
				other.RepositoryDataId == this.RepositoryDataId &&
				other.RepositoryId == this.RepositoryId
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

		#region IDataErrorInfo
		/// <summary />
		string System.ComponentModel.IDataErrorInfo.Error
		{
			get { return this.GetObjectDataErrorInfo(); }
		}

		/// <summary />
		/// <param name="columnName"></param>
		/// <returns></returns>
		string System.ComponentModel.IDataErrorInfo.this[string columnName]
		{
			get
			{
				if (string.IsNullOrEmpty(columnName))
					return string.Empty;

				var retval = GetObjectPropertyDataErrorInfo(columnName);
				if (string.IsNullOrEmpty(retval))
				{
				}
				return retval;
			}
		}
		#endregion

	}

	partial class RepositoryData : nHydrate.EFCore.DataAccess.ICreatedAudit, nHydrate.EFCore.DataAccess.IModifiedAudit, nHydrate.EFCore.DataAccess.IConcurrencyAudit
	{
		#region ICreatedAudit Members

		string ICreatedAudit.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		DateTime? ICreatedAudit.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		#endregion

		#region IModifiedAudit Members

		string IModifiedAudit.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		DateTime? IModifiedAudit.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		#endregion

		#region IConcurrencyAudit Members

		byte[] IConcurrencyAudit.TimeStamp
		{
			get { return this.Timestamp; }
		}

		#endregion

	}

}

