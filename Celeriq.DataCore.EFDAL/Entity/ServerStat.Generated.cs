//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data.Objects;
using System.Text;
using Celeriq.DataCore.EFDAL;
using nHydrate.EFCore.DataAccess;
using nHydrate.EFCore.EventArgs;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Linq;

namespace Celeriq.DataCore.EFDAL.Entity
{
	/// <summary>
	/// The collection to hold 'ServerStat' entities
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.2.0")]
	[EdmEntityTypeAttribute(NamespaceName = "Celeriq.DataCore.EFDAL.Entity", Name = "ServerStat")]
	[Serializable]
	[DataContractAttribute(IsReference = true)]
	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.ServerStatMetadata))]
	[nHydrate.EFCore.Attributes.EntityMetadata("ServerStat", false, false, false, false, "", true, false, false, "dbo")]
	public partial class ServerStat : nHydrate.EFCore.DataAccess.NHEntityObject, nHydrate.EFCore.DataAccess.IBusinessObject, Celeriq.DataCore.EFDAL.IEntityWithContext, System.ComponentModel.IDataErrorInfo, Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat, System.ICloneable, System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat>
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'ServerStat' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'AddedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'AddedDate' property")]
			AddedDate,
			/// <summary>
			/// Field mapping for the 'MemoryUsageAvailable' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageAvailable' property")]
			MemoryUsageAvailable,
			/// <summary>
			/// Field mapping for the 'MemoryUsageProcess' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageProcess' property")]
			MemoryUsageProcess,
			/// <summary>
			/// Field mapping for the 'MemoryUsageTotal' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'MemoryUsageTotal' property")]
			MemoryUsageTotal,
			/// <summary>
			/// Field mapping for the 'ProcessorUsage' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ProcessorUsage' property")]
			ProcessorUsage,
			/// <summary>
			/// Field mapping for the 'RepositoryCreateDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryCreateDelta' property")]
			RepositoryCreateDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryDeleteDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryDeleteDelta' property")]
			RepositoryDeleteDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryInMem' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryInMem' property")]
			RepositoryInMem,
			/// <summary>
			/// Field mapping for the 'RepositoryLoadDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryLoadDelta' property")]
			RepositoryLoadDelta,
			/// <summary>
			/// Field mapping for the 'RepositoryTotal' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryTotal' property")]
			RepositoryTotal,
			/// <summary>
			/// Field mapping for the 'RepositoryUnloadDelta' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'RepositoryUnloadDelta' property")]
			RepositoryUnloadDelta,
			/// <summary>
			/// Field mapping for the 'ServerStatId' property
			/// </summary>
			[nHydrate.EFCore.Attributes.PrimaryKeyAttribute()]
			[System.ComponentModel.ReadOnlyAttribute(true)]
			[System.ComponentModel.Description("Field mapping for the 'ServerStatId' property")]
			ServerStatId,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Method called when an instance of this class is created
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Initializes a new instance of the Celeriq.DataCore.EFDAL.Entity.ServerStat class
		/// </summary>
		public ServerStat()
		{
			this._addedDate = DateTime.Now;
			this.OnCreated();
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'ServerStat.AddedDate' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[AddedDate], Not Nullable, Default Value: getdate</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("AddedDate")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime AddedDate
		{
			get { return _addedDate; }
			set
			{
				if ((value < GlobalValues.MIN_DATETIME)) throw new Exception("The DateTime value 'AddedDate' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be less than " + GlobalValues.MIN_DATETIME.ToString());
				if ((value > GlobalValues.MAX_DATETIME)) throw new Exception("The DateTime value 'AddedDate' (" + value.ToString("yyyy-MM-dd HH:mm:ss") + ") cannot be greater than " + GlobalValues.MAX_DATETIME.ToString());
				if (value == _addedDate) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime>(value, "AddedDate");
				//this.OnAddedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("AddedDate");
				_addedDate = eventArg.Value;
				ReportPropertyChanged("AddedDate");
				//this.OnAddedDateChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageAvailable' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageAvailable], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("MemoryUsageAvailable")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long MemoryUsageAvailable
		{
			get { return _memoryUsageAvailable; }
			set
			{
				if (value == _memoryUsageAvailable) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<long>(value, "MemoryUsageAvailable");
				//this.OnMemoryUsageAvailableChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("MemoryUsageAvailable");
				_memoryUsageAvailable = eventArg.Value;
				ReportPropertyChanged("MemoryUsageAvailable");
				//this.OnMemoryUsageAvailableChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageProcess' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageProcess], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("MemoryUsageProcess")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long MemoryUsageProcess
		{
			get { return _memoryUsageProcess; }
			set
			{
				if (value == _memoryUsageProcess) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<long>(value, "MemoryUsageProcess");
				//this.OnMemoryUsageProcessChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("MemoryUsageProcess");
				_memoryUsageProcess = eventArg.Value;
				ReportPropertyChanged("MemoryUsageProcess");
				//this.OnMemoryUsageProcessChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.MemoryUsageTotal' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[MemoryUsageTotal], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("MemoryUsageTotal")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long MemoryUsageTotal
		{
			get { return _memoryUsageTotal; }
			set
			{
				if (value == _memoryUsageTotal) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<long>(value, "MemoryUsageTotal");
				//this.OnMemoryUsageTotalChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("MemoryUsageTotal");
				_memoryUsageTotal = eventArg.Value;
				ReportPropertyChanged("MemoryUsageTotal");
				//this.OnMemoryUsageTotalChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.ProcessorUsage' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[ProcessorUsage], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("ProcessorUsage")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int ProcessorUsage
		{
			get { return _processorUsage; }
			set
			{
				if (value == _processorUsage) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "ProcessorUsage");
				//this.OnProcessorUsageChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ProcessorUsage");
				_processorUsage = eventArg.Value;
				ReportPropertyChanged("ProcessorUsage");
				//this.OnProcessorUsageChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryCreateDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryCreateDelta], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryCreateDelta")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long RepositoryCreateDelta
		{
			get { return _repositoryCreateDelta; }
			set
			{
				if (value == _repositoryCreateDelta) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<long>(value, "RepositoryCreateDelta");
				//this.OnRepositoryCreateDeltaChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryCreateDelta");
				_repositoryCreateDelta = eventArg.Value;
				ReportPropertyChanged("RepositoryCreateDelta");
				//this.OnRepositoryCreateDeltaChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryDeleteDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryDeleteDelta], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryDeleteDelta")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual long RepositoryDeleteDelta
		{
			get { return _repositoryDeleteDelta; }
			set
			{
				if (value == _repositoryDeleteDelta) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<long>(value, "RepositoryDeleteDelta");
				//this.OnRepositoryDeleteDeltaChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryDeleteDelta");
				_repositoryDeleteDelta = eventArg.Value;
				ReportPropertyChanged("RepositoryDeleteDelta");
				//this.OnRepositoryDeleteDeltaChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryInMem' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryInMem], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryInMem")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int RepositoryInMem
		{
			get { return _repositoryInMem; }
			set
			{
				if (value == _repositoryInMem) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "RepositoryInMem");
				//this.OnRepositoryInMemChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryInMem");
				_repositoryInMem = eventArg.Value;
				ReportPropertyChanged("RepositoryInMem");
				//this.OnRepositoryInMemChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryLoadDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryLoadDelta], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryLoadDelta")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int RepositoryLoadDelta
		{
			get { return _repositoryLoadDelta; }
			set
			{
				if (value == _repositoryLoadDelta) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "RepositoryLoadDelta");
				//this.OnRepositoryLoadDeltaChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryLoadDelta");
				_repositoryLoadDelta = eventArg.Value;
				ReportPropertyChanged("RepositoryLoadDelta");
				//this.OnRepositoryLoadDeltaChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryTotal' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryTotal], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryTotal")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int RepositoryTotal
		{
			get { return _repositoryTotal; }
			set
			{
				if (value == _repositoryTotal) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "RepositoryTotal");
				//this.OnRepositoryTotalChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryTotal");
				_repositoryTotal = eventArg.Value;
				ReportPropertyChanged("RepositoryTotal");
				//this.OnRepositoryTotalChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.RepositoryUnloadDelta' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[RepositoryUnloadDelta], Not Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("RepositoryUnloadDelta")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int RepositoryUnloadDelta
		{
			get { return _repositoryUnloadDelta; }
			set
			{
				if (value == _repositoryUnloadDelta) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<int>(value, "RepositoryUnloadDelta");
				//this.OnRepositoryUnloadDeltaChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("RepositoryUnloadDelta");
				_repositoryUnloadDelta = eventArg.Value;
				ReportPropertyChanged("RepositoryUnloadDelta");
				//this.OnRepositoryUnloadDeltaChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ServerStat.ServerStatId' field.
		/// </summary>
		/// <remarks>Field: [ServerStat].[ServerStatId], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("ServerStatId")]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int ServerStatId
		{
			get { return _serverStatId; }
			set
			{
				if (value == _serverStatId) return;
				ReportPropertyChanging("ServerStatId");
				_serverStatId = value;
				ReportPropertyChanged("ServerStatId");
			}
		}

		#endregion

		#region Property Holders

		/// <summary />
		protected DateTime _addedDate;
		/// <summary />
		protected long _memoryUsageAvailable;
		/// <summary />
		protected long _memoryUsageProcess;
		/// <summary />
		protected long _memoryUsageTotal;
		/// <summary />
		protected int _processorUsage;
		/// <summary />
		protected long _repositoryCreateDelta;
		/// <summary />
		protected long _repositoryDeleteDelta;
		/// <summary />
		protected int _repositoryInMem;
		/// <summary />
		protected int _repositoryLoadDelta;
		/// <summary />
		protected int _repositoryTotal;
		/// <summary />
		protected int _repositoryUnloadDelta;
		/// <summary />
		protected int _serverStatId;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(FieldNameConstants field)
		{
			switch (field)
			{
				case FieldNameConstants.AddedDate:
					return 0;
				case FieldNameConstants.MemoryUsageAvailable:
					return 0;
				case FieldNameConstants.MemoryUsageProcess:
					return 0;
				case FieldNameConstants.MemoryUsageTotal:
					return 0;
				case FieldNameConstants.ProcessorUsage:
					return 0;
				case FieldNameConstants.RepositoryCreateDelta:
					return 0;
				case FieldNameConstants.RepositoryDeleteDelta:
					return 0;
				case FieldNameConstants.RepositoryInMem:
					return 0;
				case FieldNameConstants.RepositoryLoadDelta:
					return 0;
				case FieldNameConstants.RepositoryTotal:
					return 0;
				case FieldNameConstants.RepositoryUnloadDelta:
					return 0;
				case FieldNameConstants.ServerStatId:
					return 0;
			}
			return 0;
		}

		int nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(FieldNameConstants field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants'.");

			switch ((FieldNameConstants)field)
			{
				case FieldNameConstants.AddedDate: return typeof(DateTime);
				case FieldNameConstants.MemoryUsageAvailable: return typeof(long);
				case FieldNameConstants.MemoryUsageProcess: return typeof(long);
				case FieldNameConstants.MemoryUsageTotal: return typeof(long);
				case FieldNameConstants.ProcessorUsage: return typeof(int);
				case FieldNameConstants.RepositoryCreateDelta: return typeof(long);
				case FieldNameConstants.RepositoryDeleteDelta: return typeof(long);
				case FieldNameConstants.RepositoryInMem: return typeof(int);
				case FieldNameConstants.RepositoryLoadDelta: return typeof(int);
				case FieldNameConstants.RepositoryTotal: return typeof(int);
				case FieldNameConstants.RepositoryUnloadDelta: return typeof(int);
				case FieldNameConstants.ServerStatId: return typeof(int);
			}
			return null;
		}

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants'.");

			return GetFieldType((Celeriq.DataCore.EFDAL.Entity.ServerStat.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			return this.GetValue((FieldNameConstants)field, defaultValue);
		}

		void nHydrate.EFCore.DataAccess.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			this.SetValue((FieldNameConstants)field, newValue);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Hold the primary key for this object
		/// </summary>
		protected nHydrate.EFCore.DataAccess.IPrimaryKey _primaryKey = null;
		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return null; }
		}

		#endregion

		#region IsParented

		/// <summary>
		/// Determines if this object is part of a collection or is detached
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		public virtual bool IsParented
		{
			get { return (this.EntityState != System.Data.EntityState.Detached); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Celeriq.DataCore.EFDAL.Entity.ServerStat.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Celeriq.DataCore.EFDAL.Entity.ServerStat.Clone(this);
			item._serverStatId = 0;
			item._addedDate = DateTime.Now;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static ServerStat Clone(Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat item)
		{
			var newItem = new ServerStat();
			newItem.AddedDate = item.AddedDate;
			newItem.MemoryUsageAvailable = item.MemoryUsageAvailable;
			newItem.MemoryUsageProcess = item.MemoryUsageProcess;
			newItem.MemoryUsageTotal = item.MemoryUsageTotal;
			newItem.ProcessorUsage = item.ProcessorUsage;
			newItem.RepositoryCreateDelta = item.RepositoryCreateDelta;
			newItem.RepositoryDeleteDelta = item.RepositoryDeleteDelta;
			newItem.RepositoryInMem = item.RepositoryInMem;
			newItem.RepositoryLoadDelta = item.RepositoryLoadDelta;
			newItem.RepositoryTotal = item.RepositoryTotal;
			newItem.RepositoryUnloadDelta = item.RepositoryUnloadDelta;
			newItem.ServerStatId = item.ServerStatId;
			return newItem;
		}

		#endregion

		#region IsEquivalent

		/// <summary>
		/// Determines if all of the fields for the specified object exactly matches the current object.
		/// </summary>
		/// <param name="item">The object to compare</param>
		public override bool IsEquivalent(nHydrate.EFCore.DataAccess.INHEntityObject item)
		{
			return ((System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat>)this).Equals(item as Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat);
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field, object defaultValue)
		{
			if (field == FieldNameConstants.AddedDate)
				return this.AddedDate;
			if (field == FieldNameConstants.MemoryUsageAvailable)
				return this.MemoryUsageAvailable;
			if (field == FieldNameConstants.MemoryUsageProcess)
				return this.MemoryUsageProcess;
			if (field == FieldNameConstants.MemoryUsageTotal)
				return this.MemoryUsageTotal;
			if (field == FieldNameConstants.ProcessorUsage)
				return this.ProcessorUsage;
			if (field == FieldNameConstants.RepositoryCreateDelta)
				return this.RepositoryCreateDelta;
			if (field == FieldNameConstants.RepositoryDeleteDelta)
				return this.RepositoryDeleteDelta;
			if (field == FieldNameConstants.RepositoryInMem)
				return this.RepositoryInMem;
			if (field == FieldNameConstants.RepositoryLoadDelta)
				return this.RepositoryLoadDelta;
			if (field == FieldNameConstants.RepositoryTotal)
				return this.RepositoryTotal;
			if (field == FieldNameConstants.RepositoryUnloadDelta)
				return this.RepositoryUnloadDelta;
			if (field == FieldNameConstants.ServerStatId)
				return this.ServerStatId;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == FieldNameConstants.AddedDate)
			{
				this.AddedDate = GlobalValues.SetValueHelperDateTimeNotNullableInternal(newValue, "Field 'AddedDate' does not allow null values!");
			}
			else if (field == FieldNameConstants.MemoryUsageAvailable)
			{
				this.MemoryUsageAvailable = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageAvailable' does not allow null values!");
			}
			else if (field == FieldNameConstants.MemoryUsageProcess)
			{
				this.MemoryUsageProcess = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageProcess' does not allow null values!");
			}
			else if (field == FieldNameConstants.MemoryUsageTotal)
			{
				this.MemoryUsageTotal = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'MemoryUsageTotal' does not allow null values!");
			}
			else if (field == FieldNameConstants.ProcessorUsage)
			{
				this.ProcessorUsage = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'ProcessorUsage' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryCreateDelta)
			{
				this.RepositoryCreateDelta = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'RepositoryCreateDelta' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryDeleteDelta)
			{
				this.RepositoryDeleteDelta = GlobalValues.SetValueHelperLongNotNullableInternal(newValue, "Field 'RepositoryDeleteDelta' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryInMem)
			{
				this.RepositoryInMem = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryInMem' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryLoadDelta)
			{
				this.RepositoryLoadDelta = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryLoadDelta' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryTotal)
			{
				this.RepositoryTotal = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryTotal' does not allow null values!");
			}
			else if (field == FieldNameConstants.RepositoryUnloadDelta)
			{
				this.RepositoryUnloadDelta = GlobalValues.SetValueHelperIntNotNullableInternal(newValue, "Field 'RepositoryUnloadDelta' does not allow null values!");
			}
			else if (field == FieldNameConstants.ServerStatId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "addeddate": return "addeddate";
				case "memoryusageavailable": return "memoryusageavailable";
				case "memoryusageprocess": return "memoryusageprocess";
				case "memoryusagetotal": return "memoryusagetotal";
				case "processorusage": return "processorusage";
				case "repositorycreatedelta": return "repositorycreatedelta";
				case "repositorydeletedelta": return "repositorydeletedelta";
				case "repositoryinmem": return "repositoryinmem";
				case "repositoryloaddelta": return "repositoryloaddelta";
				case "repositorytotal": return "repositorytotal";
				case "repositoryunloaddelta": return "repositoryunloaddelta";
				case "serverstatid": return "serverstatid";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "addeddate": return "ServerStat";
				case "memoryusageavailable": return "ServerStat";
				case "memoryusageprocess": return "ServerStat";
				case "memoryusagetotal": return "ServerStat";
				case "processorusage": return "ServerStat";
				case "repositorycreatedelta": return "ServerStat";
				case "repositorydeletedelta": return "ServerStat";
				case "repositoryinmem": return "ServerStat";
				case "repositoryloaddelta": return "ServerStat";
				case "repositorytotal": return "ServerStat";
				case "repositoryunloaddelta": return "ServerStat";
				case "serverstatid": return "ServerStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "addeddate": return "ServerStat";
				case "memoryusageavailable": return "ServerStat";
				case "memoryusageprocess": return "ServerStat";
				case "memoryusagetotal": return "ServerStat";
				case "processorusage": return "ServerStat";
				case "repositorycreatedelta": return "ServerStat";
				case "repositorydeletedelta": return "ServerStat";
				case "repositoryinmem": return "ServerStat";
				case "repositoryloaddelta": return "ServerStat";
				case "repositorytotal": return "ServerStat";
				case "repositoryunloaddelta": return "ServerStat";
				case "serverstatid": return "ServerStat";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[addeddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[addeddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusageavailable\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusageavailable]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusageprocess\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusageprocess]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[memoryusagetotal\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[memoryusagetotal]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[processorusage\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[processorusage]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorycreatedelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorycreatedelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorydeletedelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorydeletedelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryinmem\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositoryinmem]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryloaddelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositoryloaddelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositorytotal\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositorytotal]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[repositoryunloaddelta\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[repositoryunloaddelta]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[serverstatid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "ServerStat") + "].[serverstatid]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), new ContextStartup(null), Celeriq.DataCore.EFDAL.DataCoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer)
		{
			return DeleteData(where, optimizer, new ContextStartup(null), Celeriq.DataCore.EFDAL.DataCoreEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, string connectionString)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), new ContextStartup(null), connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new nHydrate.EFCore.DataAccess.QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Celeriq.DataCore.EFDAL.DBHelper.GetConnection(Celeriq.DataCore.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Celeriq.DataCore.EFDAL.ServerStatQuery>();
					using (var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<Celeriq.DataCore.EFDAL.ServerStatQuery>(dc, template, where))
					{
						if (startup.CommandTimeout != null && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout.Value;
						else cmd.CommandTimeout = 30;

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						string sql = "SELECT [t0].[ServerStatId] INTO #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (NOLOCK) " : string.Empty);
						sql += "DELETE [ServerStat] FROM [dbo].[ServerStat] " + noLock + "INNER JOIN #t ON [dbo].[ServerStat].[ServerStatId] = #t.[ServerStatId]\r\n";
						sql += ";select @@rowcount";
						if (startup.IsAdmin) sql = LinqSQLParser.RemapTenantToAdminSql(sql);
						sql = "set ansi_nulls off;" + sql;
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						object p = cmd.ExecuteScalar();
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return (int)p;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, int?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, int? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, int?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Single? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Single?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, decimal? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, decimal?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, double?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, double? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, double?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, short?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, short? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, short?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, string newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, string>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, string newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, string>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, string>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, string newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, string>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, DateTime? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, DateTime?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, bool? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, bool?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid? newValue)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid? newValue, string connectionString)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>> select, Expression<Func<Celeriq.DataCore.EFDAL.ServerStatQuery, bool>> where, Guid? newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Celeriq.DataCore.EFDAL.Entity.ServerStat, Celeriq.DataCore.EFDAL.ServerStatQuery, Guid?>.UpdateData(select, where, newValue, "ServerStat", GetDatabaseFieldName, false, null, connection, transaction);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(ServerStat.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "AddedDate": return "AddedDate";
				case "MemoryUsageAvailable": return "MemoryUsageAvailable";
				case "MemoryUsageProcess": return "MemoryUsageProcess";
				case "MemoryUsageTotal": return "MemoryUsageTotal";
				case "ProcessorUsage": return "ProcessorUsage";
				case "RepositoryCreateDelta": return "RepositoryCreateDelta";
				case "RepositoryDeleteDelta": return "RepositoryDeleteDelta";
				case "RepositoryInMem": return "RepositoryInMem";
				case "RepositoryLoadDelta": return "RepositoryLoadDelta";
				case "RepositoryTotal": return "RepositoryTotal";
				case "RepositoryUnloadDelta": return "RepositoryUnloadDelta";
				case "ServerStatId": return "ServerStatId";
			}
			return string.Empty;
		}

		#endregion

		#region Context

		DataCoreEntities IEntityWithContext.Context
		{
			get { return _internalContext; }
			set { _internalContext = value; }
		}
		private DataCoreEntities _internalContext = null;

		#endregion

		#region Static Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.ServerStatMetadata GetMetadata()
		{
			var a = typeof(ServerStat).GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Celeriq.DataCore.EFDAL.Interfaces.IMetadata as Celeriq.DataCore.EFDAL.Interfaces.Entity.Metadata.ServerStatMetadata;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'ServerStat' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		bool System.IEquatable<Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat>.Equals(Celeriq.DataCore.EFDAL.Interfaces.Entity.IServerStat other)
		{
			return this.Equals(other);
		}

		/// <summary>
		/// Compares two objects of 'ServerStat' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Celeriq.DataCore.EFDAL.Entity.ServerStat;
			if (other == null) return false;
			return (
				other.AddedDate == this.AddedDate &&
				other.MemoryUsageAvailable == this.MemoryUsageAvailable &&
				other.MemoryUsageProcess == this.MemoryUsageProcess &&
				other.MemoryUsageTotal == this.MemoryUsageTotal &&
				other.ProcessorUsage == this.ProcessorUsage &&
				other.RepositoryCreateDelta == this.RepositoryCreateDelta &&
				other.RepositoryDeleteDelta == this.RepositoryDeleteDelta &&
				other.RepositoryInMem == this.RepositoryInMem &&
				other.RepositoryLoadDelta == this.RepositoryLoadDelta &&
				other.RepositoryTotal == this.RepositoryTotal &&
				other.RepositoryUnloadDelta == this.RepositoryUnloadDelta &&
				other.ServerStatId == this.ServerStatId
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

		#region IDataErrorInfo
		/// <summary />
		string System.ComponentModel.IDataErrorInfo.Error
		{
			get { return this.GetObjectDataErrorInfo(); }
		}

		/// <summary />
		/// <param name="columnName"></param>
		/// <returns></returns>
		string System.ComponentModel.IDataErrorInfo.this[string columnName]
		{
			get
			{
				if (string.IsNullOrEmpty(columnName))
					return string.Empty;

				var retval = GetObjectPropertyDataErrorInfo(columnName);
				if (string.IsNullOrEmpty(retval))
				{
				}
				return retval;
			}
		}
		#endregion

	}

	partial class ServerStat
	{
	}

}

